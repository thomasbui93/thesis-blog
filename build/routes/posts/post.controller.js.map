{"version":3,"sources":["../../../server/routes/posts/post.controller.js"],"names":[],"mappings":"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","file":"server/routes/posts/post.controller.js","sourcesContent":["import Post from './post.model';\nimport Category from '../categories/category.model';\n\nconst index = (req, res, next)=> {\n\n    Post.find({})\n        .populate('category')\n        .exec((error, posts)=>{\n        if(error){\n            return next(error);\n        }\n        if(!posts){\n            return next(error);\n        }\n        res.json(posts);\n    })\n}\n\nconst showBriefs = (req, res, next) => {\n    Post.find({})\n        .limit( 5 )\n        .sort( { createdAt: -1})\n        .select({ content: 0, keywords: 0})\n        .populate('category')\n        .exec((error, posts)=>{\n            if(error){\n                return next(error);\n            }\n            if(!posts){\n                return next(error);\n            }\n            res.json(posts);\n        });\n}\n\nconst update = (req, res, next)=>{\n    let id = req.params.postId;\n\n    Post.findById(id)\n        .populate('category')\n        .exec((error, post)=>{\n            if(error) return next(error);\n            if(!post) return next(error);\n\n            post.update(req.body, { runValidators: true, context: 'query' }, (error, pos)=> {\n                if(error) return next(error);\n                res.json(pos);\n            });\n        });\n}\n\nconst create = (req, res, next)=>{\n    let newPost = new Post(req.body);\n\n    newPost.save((error, post)=>{\n        if(error) return next(error);\n\n        res.status(201).json(post);\n    });\n}\n\nconst remove = (req, res, next)=>{\n    let id = req.params.postId;\n\n    Post.findById(id)\n        .exec((error, post)=>{\n            if(error) return next(error);\n            if(!post) return next(error);\n\n            post.remove((error)=>{\n                if(error) return next(error);\n\n                res.status(204).end();\n            });\n        });\n}\n\nconst getOne = (req, res, next)=>{\n    let id = req.params.postId;\n    Post.findOne({ slug: id})\n        .populate('category')\n        .exec((error, post)=>{\n            if(error) return next(error);\n            if(!post) return next(error);\n\n            res.json(post);\n        });\n    /*if( id.length > 24){\n        // for slug\n        Post.findOne({ slug: id})\n            .populate('category')\n            .exec((error, post)=>{\n                if(error) return next(error);\n                if(!post) return next(error);\n\n                res.json(post);\n            });\n    }\n    Post.findById(id)\n        .populate('category')\n        .exec((error, post)=>{\n            if(error) return next(error);\n            if(!post) return next(error);\n\n            res.json(post);\n        });\n        */\n}\n\nconst getCategoryPost = (req, res, next)=>{\n    const slug = req.params.categorySlug;\n    Category.findOne({url: slug}).exec((error,category)=>{\n        if(error){\n            return next(error);\n        }\n        if(category === null){\n            res.status(404).json({\n                msg: '404'\n            });\n        }else {\n            Post.find({category: category._id})\n                .populate('category')\n                .exec((error, posts)=>{\n                    if(error){\n                        return next(error);\n                    }\n                    if(!posts){\n                        return next(error);\n                    }\n                    res.json(posts);\n                })\n        }\n\n    });\n\n\n}\n\nexport { index, showBriefs, update, create, remove, getOne, getCategoryPost } ;"]}