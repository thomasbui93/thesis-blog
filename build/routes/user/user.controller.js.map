{"version":3,"sources":["../../../server/routes/user/user.controller.js"],"names":[],"mappings":"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","file":"server/routes/user/user.controller.js","sourcesContent":["import auth from 'jsonwebtoken';\nimport {jsonTokenKey, confidential} from '../../config';\n\nimport Device from './device.model';\n\nconst authenticate = (req, res, next)=>{\n    const email = req.body.email;\n    const password = req.body.password;\n\n    if(confidential.email === email && confidential.password === password){\n        const header = {\n            expireAt: new Date().valueOf() + 7*24*60*60\n        };\n        const token = auth.sign(header, jsonTokenKey);\n\n        res.json({\n            token: token\n        });\n    }else {\n        res.status(403).json({\n            error: 'not authenticated'\n        });\n    }\n};\n\nconst getUser = (req, res, next)=>{\n    Object.assign(user, confidential);\n    delete user.password;\n    res.json(user);\n};\nconst check = (req, res, next)=>{\n    auth.verify(req.body.token, jsonTokenKey, (error, decode)=>{\n        if(error){\n            res.status(200)\n                .json({\n                    msg: 'not authenticated'\n                })\n        }else {\n            const token = decode.token;\n            const expDate = new Date(token);\n            if(expDate < new Date()){\n                res.status(200)\n                    .json({\n                        msg: 'expired token'\n                    })\n            }else{\n                res.status(200)\n                    .json({\n                        msg: 'ok'\n                    })\n            }\n        }\n    })\n}\nconst checkAuth = (token)=>{\n\n    return new Promise((resolve, reject)=>{\n        auth.verify(token, jsonTokenKey, (error, decode)=>{\n            if(error){\n                reject(error);\n            }else {\n                const token = decode.token;\n                const expDate = new Date(token);\n                if(expDate < new Date()){\n                    reject({\n                            msg: 'expired token'\n                        });\n                }else{\n                    resolve({\n                        msg: 'ok'\n                    });\n                }\n            }\n        })\n    });\n\n\n}\nconst setUser = (req, res, next)=>{\n\n}\n\nexport {authenticate, getUser, setUser, check, checkAuth};\n"]}